using System;

public class Node
{
    public int Data { get; set; }
    public Node Next { get; set; }

    public Node(int data)
    {
        Data = data;
        Next = null;
    }
}

public class CircularLinkedList
{
    private Node Head { get; set; }
    private int Count { get; set; }

    public CircularLinkedList()
    {
        Head = null;
        Count = 0;
    }

    public void AddFirst(int data)
    {
        Node newNode = new Node(data);
        if (Head == null)
        {
            Head = newNode;
            newNode.Next = Head;
        }
        else
        {
            newNode.Next = Head;
            Node current = Head;
            while (current.Next != Head)
            {
                current = current.Next;
            }
            current.Next = newNode;
            Head = newNode;
        }
        Count++;
    }

    public void AddLast(int data)
    {
        Node newNode = new Node(data);
        if (Head == null)
        {
            Head = newNode;
            newNode.Next = Head;
        }
        else
        {
            Node current = Head;
            while (current.Next != Head)
            {
                current = current.Next;
            }
            current.Next = newNode;
            newNode.Next = Head;
        }
        Count++;
    }
    
    public void AddAfter(int existingData, int newData)
    {
        if (Head == null)
        {
            throw new Exception("List is empty");
        }

        Node current = Head;
        do
        {
            if (current.Data == existingData)
            {
                Node newNode = new Node(newData);
                newNode.Next = current.Next;
                current.Next = newNode;
                Count++;
                return;
            }
            current = current.Next;
        } while (current != Head);

        throw new Exception("Existing node not found");
    }

    public void Remove(int data)
    {
        if (Head == null)
        {
            throw new Exception("List is empty");
        }
        Node current = Head;
        
        if (Head.Data == data)
        {
            
            while (current.Next != Head)
            {
                current = current.Next;
            }
            current.Next = Head.Next;
            Head = Head.Next;
            Count--;
            return;
        }

        Node previous = null;
        while (current.Next != Head && current.Data != data)
        {
            previous = current;
            current = current.Next;
        }

        if (current.Data != data)
        {
            throw new Exception("Item not found");
        }

        previous.Next = current.Next;
        Count--;
    }
    
    public void RemoveNext(int data)
    {
        if (Head == null)
        {
            throw new Exception("List is empty");
        }

        Node current = Head;
        do
        {
            if (current.Data == data)
            {
                Node next = current.Next;
                if (next == null || next == Head)
                {
                    throw new Exception("Next node not found");
                }

                current.Next = next.Next;
                Count--;
                return;
            }
            current = current.Next;
        } while (current != Head);

        throw new Exception("Node not found");
    }
    
    public void SetData(int index, int data)
    {
        if (Head == null)
        {
            throw new Exception("List is empty");
        }

        if (index < 0 || index >= Count)
        {
            throw new ArgumentOutOfRangeException(nameof(index));
        }

        Node current = Head;
        for (int i = 0; i < index; i++)
        {
            current = current.Next;
        }
        current.Data = data;
    }

    public int GetCount()
    {
        return Count;
    }

    public void Print()
    {
        if (Head == null)
        {
            Console.WriteLine("List is empty");
            return;
        }

        Node current = Head;
        do
        {
            Console.Write($"{current.Data} ");
            current = current.Next;
        } while (current != Head);

        Console.WriteLine();
    }
    static void Main(string[] args)
{
    CircularLinkedList list = new CircularLinkedList();

    bool exit = false;
    while (!exit)
    {
        Console.WriteLine();
        Console.WriteLine("1. Add item to the start of the list");
        Console.WriteLine("2. Add item to the end of the list");
        Console.WriteLine("3. Add item after an existing item");
        Console.WriteLine("4. Remove item from the list");
        Console.WriteLine("5. Remove next item after a specified item");
        Console.WriteLine("6. Set the data of an item by index");
        Console.WriteLine("7. Print the list");
        Console.WriteLine("0. Exit");

        Console.Write("Enter your choice: ");
        int choice = int.Parse(Console.ReadLine());

        switch (choice)
        {
            case 1:
                Console.Write("Enter the data for the new item: ");
                int data1 = int.Parse(Console.ReadLine());
                list.AddFirst(data1);
                break;
            case 2:
                Console.Write("Enter the data for the new item: ");
                int data2 = int.Parse(Console.ReadLine());
                list.AddLast(data2);
                break;
            case 3:
                Console.Write("Enter the existing item data: ");
                int existingData = int.Parse(Console.ReadLine());
                Console.Write("Enter the new item data: ");
                int newData = int.Parse(Console.ReadLine());
                list.AddAfter(existingData, newData);
                break;
            case 4:
                Console.Write("Enter the data to remove: ");
                int data4 = int.Parse(Console.ReadLine());
                list.Remove(data4);
                break;
            case 5:
                Console.Write("Enter the data of the item to remove the next item after: ");
                int data5 = int.Parse(Console.ReadLine());
                list.RemoveNext(data5);
                break;
            case 6:
                Console.Write("Enter the index of the item to set: ");
                int index = int.Parse(Console.ReadLine());
                Console.Write("Enter the new data for the item: ");
                int data6 = int.Parse(Console.ReadLine());
                list.SetData(index, data6);
                break;
            case 7:
                list.Print();
                break;
            case 0:
                exit = true;
                break;
            default:
                Console.WriteLine("Invalid choice.");
                break;
        }
    }
}
}
